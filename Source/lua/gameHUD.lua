---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ninovanhooff.
--- DateTime: 14/03/2022 18:51
---

import "CoreLibs/graphics"
import "CoreLibs/object"
import "CoreLibs/animation"

local floor <const> = math.floor
local max <const> = math.max
local abs <const> = math.abs
local gfx <const> = playdate.graphics
local unFlipped <const> = gfx.kImageUnflipped
local defaultFont = defaultFont
local monoFont = monoFont

local hudIcons = sprite -- hudIcons are placed at origin of the sprite
local hudBgClr = gfx.kColorWhite
local hudFgClr = gfx.kColorBlack
local hudPadding = 8 -- distance between items
local hudGutter = 4 -- distance between item icon and item value

local hudBlinkers = {}
for i = 1,#extras+1 do -- all extras +1 for keys
    hudBlinkers[i] = gfx.animation.blinker.new()
end

class('GameHUD').extends()

-- no initializer

-- global singleton
gameHUD = GameHUD()

local function drawIcon(x, index)
    hudIcons:draw(x,hudY,unFlipped,index*16,0,16,16)
end

function GameHUD:render()
    gfx.setColor(hudBgClr)
    gfx.fillRect(0,hudY,400,16)
    gfx.setColor(hudFgClr)
    local x = hudPadding

    -- lives
    if hudBlinkers[2].on then
        drawIcon(x, 0)
    end
    x = x+16+hudGutter
    defaultFont:drawText(extras[2], x, hudY)
    x = x+10+hudPadding

    -- fuel
    if fuel > 1500 or frameCounter % 20 > 10 then
        drawIcon(x, 5)
    end
    x = x+16+hudGutter
    gfx.drawRect(x, hudY+1, 32, 14)
    local fuelW = (fuel/6000)*28
    gfx.setPattern({0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99})
    gfx.fillRect(x+3, hudY+4, fuelW,8)
    gfx.setColor(hudFgClr)
    x = x+32+hudPadding

    -- cargo
    if hudBlinkers[3].on then
        drawIcon(x, 7)
    end
    x = x+16+hudGutter
    local containerWidth = extras[3] * 10 + 4
    gfx.drawRect(x, hudY+1, containerWidth, 14)
    for i=0,#planeFreight-1 do
        hudIcons:draw(x+i*10+2, hudY+3, unFlipped, 115, 18,10,10)
    end
    x = x+containerWidth+hudPadding-1

    -- keys
    if hudBlinkers[4].on then
        drawIcon(x, 1)
    end
    x=x+12+hudGutter
    for i=1,4 do
        local subX = (i+1)%2*8
        local subY = boolToNum(i>2)*9
        hudIcons:draw(x+subX, hudY+subY, unFlipped, 32 +subX, boolToNum(keys[i])*16,8,8)
    end
    x = x+15+hudPadding

    -- turbo -> speed warning
    if(extras[1] > 0) then -- turbo enabled
        if hudBlinkers[1].on then
            hudIcons:draw(x, hudY, unFlipped, 48,16 ,16,16)
        end
    else
        drawIcon(x, 3) -- rggular speed icon
    end
    x = x+16+hudGutter
    gfx.drawCircleInRect(x+1,hudY+1, 14,14)
    local speedPattern = gfx.image.kDitherTypeBayer4x4
    local warnX = 1/(landingTolerance[1] / abs(vx))
    local warnY = 1/(landingTolerance[2] / vy) -- only downwards movement is dangerous
    local warnAlpha = max(warnX, warnY)
    gfx.setDitherPattern(1-warnAlpha, speedPattern) -- invert alpha due to bug in SDK
    gfx.fillCircleInRect(x+4,hudY+4, 8,8)
    gfx.setDitherPattern(1, gfx.image.kDitherTypeNone)
    x = x+16+hudPadding

    -- elapsed time
    local eSec = floor(frameCounter/frameRate)
    local textW = monoFont:getTextWidth(eSec)
    x = screenWidth - textW - hudPadding
    monoFont:drawText(eSec,x,hudY+8)
    x = x - hudGutter - 16
    drawIcon(x, 4)
end

--- Notify the GameHud that the count of one of the stats has changed.
--- @param itemId number @ 1: turbo, 2: lives, 3:cargo, 4: key
function GameHUD:onChanged(itemId)
    printf("#extras", #extras, "extratype", itemId, "#hudBlinkers", hudBlinkers)
    hudBlinkers[itemId]:start()
end
