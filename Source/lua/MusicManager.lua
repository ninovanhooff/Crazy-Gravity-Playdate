---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ninovanhooff.
--- DateTime: 25/08/2022 22:40
---


local timer <const> = playdate.timer

class("MusicManager").extends()

function MusicManager:init()
    MusicManager.super.init(self)
    self.volume = 1.0
    self.currentPath = nil
    self.player = nil
    self.fadeTimer = nil
end

if not musicManager then
    musicManager = MusicManager()
end

function MusicManager:cancelFade()
    if self.fadeTimer then
        self.fadeTimer:remove()
        self.fadeTimer = nil
    end
end

function MusicManager:play(path)
    print("---MUSIC", path)
    if self.currentPath == path and self.player and self.player:isPlaying() then
        print("Already playing this track.")
        return
    end
    sample("loading new track", function()
        self:fade(0.0)
        self.player = playdate.sound.fileplayer.new(path, 1)
        if self.player then
            self.player:setStopOnUnderrun(false)
            self.player:setVolume(self.volume)
            self.player:play(0)
            self.currentPath = path
        end
    end, 1)
    print("---END MUSIC")
end

function MusicManager:stop()
    self:cancelFade()
    if self.player then
        self.player:stop()
    end
end

--- start a previously stopped song
--- does nothing when no song is loaded
function MusicManager:start()
    if self.player then
        self.player:play(0)
    end
end

function MusicManager:isPlaying()
    if not self.player then
        return false
    end

    return self.player:isPlaying()
end

--- Fade in or out, starting at the current volume
--- @param volumeMultiplier: volume relative to this MusicManager's volume
---        when 0.0, playback will be stopped after the fade has completed
function MusicManager:fade(volumeMultiplier)
    local currentPlayer <const> = self.player
    local targetVolume = (volumeMultiplier or 0.0) * self.volume
    self:cancelFade() -- ensure no simultaneous fades fades
    if currentPlayer then
        local fadeTimer = timer.new(1000, currentPlayer:getVolume(), targetVolume)
        self.fadeTimer = fadeTimer
        fadeTimer.updateCallback = function()
            currentPlayer:setVolume(fadeTimer.value)
        end
        fadeTimer.timerEndedCallback = function()
            if targetVolume == 0.0  then
                currentPlayer:stop()
                if self.player == currentPlayer then
                    self:stop()
                end
            end
        end
    end
end

--- range 0.0 - 1.0
function MusicManager:setVolume(vol)
    self.volume = vol
    if self.player then
        self.player:setVolume(vol)
    end
end
